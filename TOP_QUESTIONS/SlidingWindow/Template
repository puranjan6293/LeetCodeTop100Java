// A sliding window is a window of fixed length that moves through an array
// from left to right, processing the elements within the window.

// The sliding window algorithm is used to perform a task on a fixed-size
// subset of a larger array or list, and then moving the window to the right
// by a fixed number of elements, repeating the task on the new subset.

// This is useful for tasks such as finding the maximum or minimum of a
// fixed number of elements in an array, or for performing some task on
// every N elements of an array.

// The sliding window algorithm has a time complexity of O(n), where n is
// the number of elements in the array.

import java.util.Arrays;

public class SlidingWindow {
    public static void main(String[] args) {
        // Example array to run the sliding window algorithm on
        int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

        // Set the size of the sliding window
        int windowSize = 3;

        // Initialize the starting index of the sliding window
        int windowStart = 0;

        // Initialize the ending index of the sliding window
        int windowEnd = windowSize - 1;

        // Initialize the maximum value found within the sliding window
        int maxValue = Integer.MIN_VALUE;

        // Run the sliding window algorithm until the windowEnd index
        // is less than the length of the array
        while (windowEnd < arr.length) {
            // Get the maximum value within the sliding window
            maxValue = Math.max(maxValue, Arrays.stream(arr, windowStart, windowEnd + 1).max().getAsInt());

            // Move the sliding window to the right by one element
            windowStart++;
            windowEnd++;
        }

        // Print the maximum value found within the sliding window
        System.out.println("Maximum value within the sliding window: " + maxValue);
    }
}
